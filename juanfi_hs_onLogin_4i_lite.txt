# juanfi_hs_onLogin_4i_lite
# by: Chloe Renae & Edmar Lozada
# ------------------------------

# Get User Data
local iUser $user
local iDInt $interface
local iDMac $"mac-address"
local aUser [/ip hotspot user get [find name=$user]]
local aNote [toarray ($aUser->"comment")]
local iValidity [totime ($aNote->0)]
local iExtUCode ($aNote->2)
local iUserTime ($aUser->"limit-uptime")

# Check Valid Entry
if (($iValidity>=0) and ($iExtUCode=0 or $iExtUCode=1) and ($iUserTime>0)) do={
  local eReplace do={
    local iRet
    for i from=0 to=([len $1]-1) do={
      local x [pick $1 $i]
      if ($x = $2) do={set x $3}
      set iRet ($iRet . $x)
    }; return $iRet
  }
  local iFHotspot [/ip hotspot profile get [.. get [find interface=$iDInt] profile] html-directory]
  local iFileName [$eReplace $iDMac ":" ""]
  local iUsrExist [/system scheduler find name=$iUser]

# EXTEND USER MODULE
  if ($iUsrExist!="") do={
    local iInterval [/system scheduler get [find name=$iUser] interval]
    if (($iValidity != 0s) and (($iValidity + $iInterval) < $iUserTime)) do={
      set iInterval $iUserTime
    } else={
      set iInterval ($iValidity + $iInterval)
    }
    /system scheduler set [find name=$user] interval=$iInterval
    /ip hotspot user set [find name=$user] comment=""
  }

# ADDNEW USER MODULE
  if ($iUsrExist="") do={
    local iInterval $iValidity
    if (($iValidity != 0s) and ($iValidity < $iUserTime)) do={
      set iInterval $iUserTime
    }
    /system scheduler add name=$iUser interval=$iInterval \
    on-event=("# EXPIRE ( $user ) #\r\n".\
              "/ip hotspot active remove [find user=\"$iUser\"]\r\n".\
              "/ip hotspot cookie remove [find user=\"$iUser\"]\r\n".\
              "/ip hotspot cookie remove [find mac-address=\"$iDMac\"]\r\n".\
              "/system scheduler  remove [find name=\"$iUser\"]\r\n".\
              "/ip hotspot user   remove [find name=\"$iUser\"]\r\n".\
              "if ([/file find name=\"$iFHotspot/data/$iFileName.txt\"]!=\"\") do={\r\n".\
              "  /file remove [find name=\"$iFHotspot/data/$iFileName.txt\"]\r\n".\
              "} else={log error \"( $user ) SCHEDULER ERROR! [$iFHotspot/data/$iFileName.txt] => MISSING!\"}\r\n".\
              "# END #\r\n")
    local x 10;while (($x>0) and ([/system scheduler find name=$iUser]="")) do={set x ($x-1);delay 1s}
    # Cancel user-login if user-scheduler MISSING!
    if ([/system scheduler find name=$iUser]="") do={
      log error "( $user ) ONLOGIN ERROR! /system scheduler [$user] => MISSING!"
      /ip hotspot active remove [find user=$iUser]
      /ip hotspot cookie remove [find user=$iUser]
      /ip hotspot cookie remove [find mac-address=$iDMac]
      return
    }
    /ip hotspot user set [find name=$user] comment=""
  }

# Create User Data File
  local iValidUntil [/system scheduler get [find name=$iUser] next-run]
  if ([/file find name="$iFHotspot/data"]!="") do={
    /file print file="$iFHotspot/data/$iFileName.txt" where name="$iFileName.txt"
    local x 10;while (($x>0) and ([/file find name="$iFHotspot/data/$iFileName.txt"]="")) do={set x ($x-1);delay 1s}
    if ([/file find name="$iFHotspot/data/$iFileName.txt"]!="") do={
      /file set "$iFHotspot/data/$iFileName" contents="$iUser#$iValidUntil"
    } else={log error "( $user ) ONLOGIN ERROR! /file [$iFHotspot/data/$iFileName.txt] => MISSING!"}
  } else={log error "( $user ) ONLOGIN ERROR! /file [$iFHotspot/data] => MISSING!"}

}

